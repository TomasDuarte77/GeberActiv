{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DuaTo\\\\Downloads\\\\Geberactiv-main1\\\\src\\\\components\\\\barcode\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport '../barcode/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Barcode({\n  excelData,\n  barcodeDB,\n  setBarcodeDB,\n  showMessage\n}) {\n  _s();\n  const [inputBarcode, setInputBarcode] = useState('');\n  function handleBarcodeInput(barcode) {\n    if (!excelData) {\n      showMessage('Importe um ficheiro', 'alert');\n      setInputBarcode('');\n      return;\n    }\n    let userData = excelData[barcode];\n    if (!userData) {\n      showMessage('Este código de barras não existe', 'error');\n      setInputBarcode('');\n      return;\n    }\n\n    // Verificação correta para evitar registros duplicados\n    const isDuplicate = barcodeDB.some(data => data[0] === barcode);\n    if (isDuplicate) {\n      showMessage('Este código de barras já foi registado', 'error');\n      setInputBarcode('');\n      return;\n    }\n\n    // Adicionar o código de barras ao banco de dados\n    const updatedBarcodeDB = [...barcodeDB, userData];\n    setBarcodeDB(updatedBarcodeDB);\n    localStorage.setItem('gactiveBarcodeReadData', JSON.stringify(updatedBarcodeDB));\n\n    // Atualizar o status no localStorage\n    let getJsonArray = localStorage.getItem('gactiveImportedData');\n    let jsonConvert = getJsonArray ? JSON.parse(getJsonArray) : [];\n    let formatJson = jsonConvert.reduce((acc, current) => {\n      return {\n        ...acc,\n        [current[0]]: current\n      };\n    }, {});\n    if (formatJson[barcode]) {\n      formatJson[barcode].push('check_circle');\n    }\n    localStorage.setItem('gactiveImportedData', JSON.stringify(Object.values(formatJson)));\n    setInputBarcode('');\n    showMessage('Código de barras inserido com sucesso!', 'success');\n  }\n  function handleConfirm() {\n    if (inputBarcode.length === 8) {\n      handleBarcodeInput(inputBarcode);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Introduza o seu C\\xF3digo de Barras\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"barcode-input\",\n      type: \"number\",\n      placeholder: \"C\\xF3digo de Barras\",\n      onChange: e => setInputBarcode(e.target.value),\n      value: inputBarcode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"confirm-button\",\n      onClick: handleConfirm,\n      children: \"Confirmar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(Barcode, \"xxRFWmi51cqtjYJdmDvkdbK1LSE=\");\n_c = Barcode;\nexport default Barcode;\nvar _c;\n$RefreshReg$(_c, \"Barcode\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Barcode","excelData","barcodeDB","setBarcodeDB","showMessage","_s","inputBarcode","setInputBarcode","handleBarcodeInput","barcode","userData","isDuplicate","some","data","updatedBarcodeDB","localStorage","setItem","JSON","stringify","getJsonArray","getItem","jsonConvert","parse","formatJson","reduce","acc","current","push","Object","values","handleConfirm","length","children","fileName","_jsxFileName","lineNumber","columnNumber","className","type","placeholder","onChange","e","target","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/DuaTo/Downloads/Geberactiv-main1/src/components/barcode/index.js"],"sourcesContent":["import { useState } from 'react';\r\nimport '../barcode/index.css';\r\n\r\nfunction Barcode({ excelData, barcodeDB, setBarcodeDB, showMessage }) {\r\n  const [inputBarcode, setInputBarcode] = useState('');\r\n\r\n  function handleBarcodeInput(barcode) {\r\n    if (!excelData) {\r\n      showMessage('Importe um ficheiro', 'alert');\r\n      setInputBarcode('');\r\n      return;\r\n    }\r\n\r\n    let userData = excelData[barcode];\r\n\r\n    if (!userData) {\r\n      showMessage('Este código de barras não existe', 'error');\r\n      setInputBarcode('');\r\n      return;\r\n    }\r\n\r\n    // Verificação correta para evitar registros duplicados\r\n    const isDuplicate = barcodeDB.some((data) => data[0] === barcode);\r\n    if (isDuplicate) {\r\n      showMessage('Este código de barras já foi registado', 'error');\r\n      setInputBarcode('');\r\n      return;\r\n    }\r\n\r\n    // Adicionar o código de barras ao banco de dados\r\n    const updatedBarcodeDB = [...barcodeDB, userData];\r\n    setBarcodeDB(updatedBarcodeDB);\r\n    localStorage.setItem('gactiveBarcodeReadData', JSON.stringify(updatedBarcodeDB));\r\n\r\n    // Atualizar o status no localStorage\r\n    let getJsonArray = localStorage.getItem('gactiveImportedData');\r\n    let jsonConvert = getJsonArray ? JSON.parse(getJsonArray) : [];\r\n    let formatJson = jsonConvert.reduce((acc, current) => {\r\n      return { ...acc, [current[0]]: current };\r\n    }, {});\r\n\r\n    if (formatJson[barcode]) {\r\n      formatJson[barcode].push('check_circle');\r\n    }\r\n\r\n    localStorage.setItem('gactiveImportedData', JSON.stringify(Object.values(formatJson)));\r\n\r\n    setInputBarcode('');\r\n    showMessage('Código de barras inserido com sucesso!', 'success');\r\n  }\r\n\r\n  function handleConfirm() {\r\n    if (inputBarcode.length === 8) {\r\n      handleBarcodeInput(inputBarcode);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p>Introduza o seu Código de Barras</p>\r\n      <input \r\n        className='barcode-input' \r\n        type='number' \r\n        placeholder='Código de Barras' \r\n        onChange={(e) => setInputBarcode(e.target.value)} \r\n        value={inputBarcode}\r\n      />\r\n      <button className='confirm-button' onClick={handleConfirm}>Confirmar</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Barcode;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}