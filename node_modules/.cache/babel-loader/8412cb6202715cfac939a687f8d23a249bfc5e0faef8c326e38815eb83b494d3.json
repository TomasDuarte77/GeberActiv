{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DuaTo\\\\Downloads\\\\Geberactiv-main\\\\Geberactiv-main\\\\src\\\\components\\\\barcode\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Barcode() {\n  _s();\n  const [excelData, setExcelData] = useState(null);\n  const [inputBarcode, setInputBarcode] = useState('');\n  const [legicDB, setLegicDB] = useState([]);\n  const [exportButtonDisplay, setExportButtonDisplay] = useState(false);\n  useEffect(() => {\n    checkDb();\n  }, []);\n  function checkDb() {\n    const getLocalStorage = localStorage.getItem('gactiveLegicReadData');\n    if (getLocalStorage) {\n      setExportButtonDisplay(true);\n    }\n  }\n  function handleBarcodeInput(barcode) {\n    if (excelData !== null) {\n      let userData = excelData[barcode];\n      if (userData !== undefined && userData !== null) {\n        let doubleVerify = legicDB.filter(data => data[2] === barcode);\n        if (doubleVerify.length > 0) {\n          alert('Este utilizador já foi registado');\n          setInputBarcode('');\n        } else {\n          const legicDBCopy = [...legicDB];\n          legicDBCopy.push(userData);\n          setLegicDB(legicDBCopy);\n          localStorage.setItem('gactiveLegicReadData', JSON.stringify(legicDBCopy));\n\n          // Atualizando o status do código de barras no \"gactiveImportedData\"\n          let getJsonArray = localStorage.getItem('gactiveImportedData');\n          let jsonConvert = JSON.parse(getJsonArray);\n          let formatJson = jsonConvert.reduce((acc, current) => {\n            return {\n              ...acc,\n              ...{\n                [current[2]]: current\n              }\n            };\n          }, {});\n          let getUserToStatus = formatJson[barcode];\n          delete jsonConvert[barcode];\n          getUserToStatus.push('check_circle');\n          const legicStatus = [...jsonConvert];\n          localStorage.setItem('gactiveImportedData', JSON.stringify(legicStatus));\n          checkDb(); // Verificar novamente o DB\n          setInputBarcode('');\n        }\n      } else {\n        alert('Este código de barras não existe');\n        setInputBarcode('');\n      }\n    } else {\n      alert('Importe um ficheiro');\n      setInputBarcode('');\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"barcode-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: inputBarcode,\n      onChange: e => setInputBarcode(e.target.value),\n      placeholder: \"C\\xF3digo de Barras\",\n      className: \"barcode-input\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleBarcodeInput(inputBarcode),\n      className: \"confirm-button\",\n      children: \"Confirmar C\\xF3digo de Barras\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(Barcode, \"CIUs0pE641PF2Mm/FyabfHPADBE=\");\n_c = Barcode;\nexport default Barcode;\nvar _c;\n$RefreshReg$(_c, \"Barcode\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Barcode","_s","excelData","setExcelData","inputBarcode","setInputBarcode","legicDB","setLegicDB","exportButtonDisplay","setExportButtonDisplay","checkDb","getLocalStorage","localStorage","getItem","handleBarcodeInput","barcode","userData","undefined","doubleVerify","filter","data","length","alert","legicDBCopy","push","setItem","JSON","stringify","getJsonArray","jsonConvert","parse","formatJson","reduce","acc","current","getUserToStatus","legicStatus","className","children","type","value","onChange","e","target","placeholder","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/DuaTo/Downloads/Geberactiv-main/Geberactiv-main/src/components/barcode/index.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nfunction Barcode() {\r\n  const [excelData, setExcelData] = useState(null);\r\n  const [inputBarcode, setInputBarcode] = useState('');\r\n  const [legicDB, setLegicDB] = useState([]);\r\n  const [exportButtonDisplay, setExportButtonDisplay] = useState(false);\r\n\r\n  useEffect(() => {\r\n    checkDb();\r\n  }, []);\r\n\r\n  function checkDb() {\r\n    const getLocalStorage = localStorage.getItem('gactiveLegicReadData');\r\n    if (getLocalStorage) {\r\n      setExportButtonDisplay(true);\r\n    }\r\n  }\r\n\r\n  function handleBarcodeInput(barcode) {\r\n    if (excelData !== null) {\r\n      let userData = excelData[barcode];\r\n\r\n      if (userData !== undefined && userData !== null) {\r\n        let doubleVerify = legicDB.filter(data => data[2] === barcode);\r\n        if (doubleVerify.length > 0) {\r\n          alert('Este utilizador já foi registado');\r\n          setInputBarcode('');\r\n        } else {\r\n          const legicDBCopy = [...legicDB];\r\n          legicDBCopy.push(userData);\r\n          setLegicDB(legicDBCopy);\r\n          localStorage.setItem('gactiveLegicReadData', JSON.stringify(legicDBCopy));\r\n\r\n          // Atualizando o status do código de barras no \"gactiveImportedData\"\r\n          let getJsonArray = localStorage.getItem('gactiveImportedData');\r\n          let jsonConvert = JSON.parse(getJsonArray);\r\n          let formatJson = jsonConvert.reduce((acc, current) => {\r\n            return { ...acc, ...{ [current[2]]: current } };\r\n          }, {});\r\n\r\n          let getUserToStatus = formatJson[barcode];\r\n          delete jsonConvert[barcode];\r\n          getUserToStatus.push('check_circle');\r\n          const legicStatus = [...jsonConvert];\r\n          localStorage.setItem('gactiveImportedData', JSON.stringify(legicStatus));\r\n\r\n          checkDb(); // Verificar novamente o DB\r\n          setInputBarcode('');\r\n        }\r\n      } else {\r\n        alert('Este código de barras não existe');\r\n        setInputBarcode('');\r\n      }\r\n    } else {\r\n      alert('Importe um ficheiro');\r\n      setInputBarcode('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"barcode-container\">\r\n      <input\r\n        type=\"number\"\r\n        value={inputBarcode}\r\n        onChange={(e) => setInputBarcode(e.target.value)}\r\n        placeholder=\"Código de Barras\"\r\n        className=\"barcode-input\"\r\n        autoFocus\r\n      />\r\n      <button\r\n        onClick={() => handleBarcodeInput(inputBarcode)}\r\n        className=\"confirm-button\"\r\n      >\r\n        Confirmar Código de Barras\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Barcode;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACW,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAErED,SAAS,CAAC,MAAM;IACdc,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,SAASA,OAAOA,CAAA,EAAG;IACjB,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,sBAAsB,CAAC;IACpE,IAAIF,eAAe,EAAE;MACnBF,sBAAsB,CAAC,IAAI,CAAC;IAC9B;EACF;EAEA,SAASK,kBAAkBA,CAACC,OAAO,EAAE;IACnC,IAAIb,SAAS,KAAK,IAAI,EAAE;MACtB,IAAIc,QAAQ,GAAGd,SAAS,CAACa,OAAO,CAAC;MAEjC,IAAIC,QAAQ,KAAKC,SAAS,IAAID,QAAQ,KAAK,IAAI,EAAE;QAC/C,IAAIE,YAAY,GAAGZ,OAAO,CAACa,MAAM,CAACC,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAKL,OAAO,CAAC;QAC9D,IAAIG,YAAY,CAACG,MAAM,GAAG,CAAC,EAAE;UAC3BC,KAAK,CAAC,kCAAkC,CAAC;UACzCjB,eAAe,CAAC,EAAE,CAAC;QACrB,CAAC,MAAM;UACL,MAAMkB,WAAW,GAAG,CAAC,GAAGjB,OAAO,CAAC;UAChCiB,WAAW,CAACC,IAAI,CAACR,QAAQ,CAAC;UAC1BT,UAAU,CAACgB,WAAW,CAAC;UACvBX,YAAY,CAACa,OAAO,CAAC,sBAAsB,EAAEC,IAAI,CAACC,SAAS,CAACJ,WAAW,CAAC,CAAC;;UAEzE;UACA,IAAIK,YAAY,GAAGhB,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC;UAC9D,IAAIgB,WAAW,GAAGH,IAAI,CAACI,KAAK,CAACF,YAAY,CAAC;UAC1C,IAAIG,UAAU,GAAGF,WAAW,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAK;YACpD,OAAO;cAAE,GAAGD,GAAG;cAAE,GAAG;gBAAE,CAACC,OAAO,CAAC,CAAC,CAAC,GAAGA;cAAQ;YAAE,CAAC;UACjD,CAAC,EAAE,CAAC,CAAC,CAAC;UAEN,IAAIC,eAAe,GAAGJ,UAAU,CAAChB,OAAO,CAAC;UACzC,OAAOc,WAAW,CAACd,OAAO,CAAC;UAC3BoB,eAAe,CAACX,IAAI,CAAC,cAAc,CAAC;UACpC,MAAMY,WAAW,GAAG,CAAC,GAAGP,WAAW,CAAC;UACpCjB,YAAY,CAACa,OAAO,CAAC,qBAAqB,EAAEC,IAAI,CAACC,SAAS,CAACS,WAAW,CAAC,CAAC;UAExE1B,OAAO,CAAC,CAAC,CAAC,CAAC;UACXL,eAAe,CAAC,EAAE,CAAC;QACrB;MACF,CAAC,MAAM;QACLiB,KAAK,CAAC,kCAAkC,CAAC;QACzCjB,eAAe,CAAC,EAAE,CAAC;MACrB;IACF,CAAC,MAAM;MACLiB,KAAK,CAAC,qBAAqB,CAAC;MAC5BjB,eAAe,CAAC,EAAE,CAAC;IACrB;EACF;EAEA,oBACEN,OAAA;IAAKsC,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCvC,OAAA;MACEwC,IAAI,EAAC,QAAQ;MACbC,KAAK,EAAEpC,YAAa;MACpBqC,QAAQ,EAAGC,CAAC,IAAKrC,eAAe,CAACqC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MACjDI,WAAW,EAAC,qBAAkB;MAC9BP,SAAS,EAAC,eAAe;MACzBQ,SAAS;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eACFlD,OAAA;MACEmD,OAAO,EAAEA,CAAA,KAAMpC,kBAAkB,CAACV,YAAY,CAAE;MAChDiC,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAC3B;IAED;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAChD,EAAA,CA5EQD,OAAO;AAAAmD,EAAA,GAAPnD,OAAO;AA8EhB,eAAeA,OAAO;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}