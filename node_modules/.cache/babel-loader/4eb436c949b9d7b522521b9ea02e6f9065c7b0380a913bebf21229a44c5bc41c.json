{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DuaTo\\\\Downloads\\\\Geberactiv-main1\\\\src\\\\components\\\\barcode\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport '../barcode/index.css';\nimport { Logo } from '../logo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Barcode({\n  excelData,\n  legicDB,\n  setLegicDB,\n  showMessage\n}) {\n  _s();\n  const [inputBarcode, setInputBarcode] = useState('');\n  const [registeredLegicData, setRegisteredLegicData] = useState(true);\n  const [exportButtonDisplay, setExportButtonDisplay] = useState(false);\n  const [legicCount, setLegicCount] = useState(0);\n  const [barcodeCount, setBarcodeCount] = useState(0);\n  function checkDb() {\n    let getLocalStorage = localStorage.getItem('gactiveLegicReadData');\n    if (getLocalStorage) {\n      setExportButtonDisplay(true);\n    }\n  }\n  function handleBarcodeInput(barcode) {\n    if (excelData !== null) {\n      let userData = excelData[barcode];\n      if (userData !== undefined && userData !== null) {\n        let doubleVerify = legicDB.some(data => data.barcode === barcode);\n        if (doubleVerify) {\n          alert('Este utilizador já foi registado');\n          setInputBarcode('');\n        } else {\n          const legicDBCopy = [...legicDB];\n          legicDBCopy.push(userData);\n          setLegicDB(legicDBCopy);\n          setRegisteredLegicData(true);\n          localStorage.setItem('gactiveLegicReadData', JSON.stringify(legicDBCopy));\n          let getJsonArray = localStorage.getItem('gactiveImportedData');\n          let jsonConvert = JSON.parse(getJsonArray);\n          let formatJson = jsonConvert.reduce((acc, current) => {\n            return {\n              ...acc,\n              ...{\n                [current[2]]: current\n              }\n            };\n          }, {});\n          let getUserToStatus = formatJson[barcode];\n          delete jsonConvert[barcode];\n          getUserToStatus.push('check_circle');\n          const legicStatus = [...jsonConvert];\n          localStorage.setItem('gactiveImportedData', JSON.stringify(legicStatus));\n          checkDb();\n          setInputBarcode('');\n        }\n      } else {\n        alert('Este código de barras não existe');\n        setInputBarcode('');\n      }\n    } else {\n      alert('Importe um ficheiro');\n      setInputBarcode('');\n    }\n  }\n  function handleConfirm() {\n    if (inputBarcode.length === 8) {\n      handleBarcodeInput(inputBarcode);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"barcode-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Introduza o seu C\\xF3digo de Barras\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total de C\\xF3digos de Barras registados: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: barcodeCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 43\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"barcode-input\",\n      type: \"number\",\n      placeholder: \"C\\xF3digo de Barras\",\n      onChange: e => setInputBarcode(e.target.value),\n      value: inputBarcode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"confirm-button\",\n      onClick: handleConfirm,\n      children: \"Confirmar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(Barcode, \"EWpT2D3tiHnwJGa/gIQYNwcNVDQ=\");\n_c = Barcode;\nexport default Barcode;\nvar _c;\n$RefreshReg$(_c, \"Barcode\");","map":{"version":3,"names":["useState","Logo","jsxDEV","_jsxDEV","Barcode","excelData","legicDB","setLegicDB","showMessage","_s","inputBarcode","setInputBarcode","registeredLegicData","setRegisteredLegicData","exportButtonDisplay","setExportButtonDisplay","legicCount","setLegicCount","barcodeCount","setBarcodeCount","checkDb","getLocalStorage","localStorage","getItem","handleBarcodeInput","barcode","userData","undefined","doubleVerify","some","data","alert","legicDBCopy","push","setItem","JSON","stringify","getJsonArray","jsonConvert","parse","formatJson","reduce","acc","current","getUserToStatus","legicStatus","handleConfirm","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/DuaTo/Downloads/Geberactiv-main1/src/components/barcode/index.js"],"sourcesContent":["import { useState } from 'react';\r\nimport '../barcode/index.css'\r\nimport { Logo } from '../logo';\r\nfunction Barcode({ excelData, legicDB, setLegicDB, showMessage }) {\r\n  const [inputBarcode, setInputBarcode] = useState('');\r\n  const [registeredLegicData, setRegisteredLegicData] = useState(true);\r\n  const [exportButtonDisplay, setExportButtonDisplay] = useState(false);\r\n  const [legicCount, setLegicCount] = useState(0); \r\n    const [barcodeCount, setBarcodeCount] = useState(0);  \r\n\r\n  function checkDb() {\r\n    let getLocalStorage = localStorage.getItem('gactiveLegicReadData');\r\n    if (getLocalStorage) {\r\n      setExportButtonDisplay(true);\r\n    }\r\n  }\r\n  function handleBarcodeInput(barcode) {\r\n    if (excelData !== null) {\r\n      let userData = excelData[barcode];\r\n  \r\n      if (userData !== undefined && userData !== null) {\r\n        let doubleVerify = legicDB.some(data => data.barcode === barcode);\r\n        if (doubleVerify) {\r\n          alert('Este utilizador já foi registado');\r\n          setInputBarcode('');\r\n        } else {\r\n          const legicDBCopy = [...legicDB];\r\n          legicDBCopy.push(userData);\r\n          setLegicDB(legicDBCopy);\r\n          setRegisteredLegicData(true);\r\n          localStorage.setItem('gactiveLegicReadData', JSON.stringify(legicDBCopy));\r\n          let getJsonArray = localStorage.getItem('gactiveImportedData');\r\n          let jsonConvert = JSON.parse(getJsonArray);\r\n          let formatJson = jsonConvert.reduce((acc, current) => {\r\n            return { ...acc, ...{ [current[2]]: current } };\r\n          }, {}); \r\n          let getUserToStatus = formatJson[barcode];\r\n          delete jsonConvert[barcode];\r\n          getUserToStatus.push('check_circle');\r\n          const legicStatus = [...jsonConvert];\r\n          localStorage.setItem('gactiveImportedData', JSON.stringify(legicStatus));\r\n          checkDb();\r\n          setInputBarcode('');\r\n        }\r\n      } else {\r\n        alert('Este código de barras não existe');\r\n        setInputBarcode('');\r\n      }\r\n    } else {\r\n      alert('Importe um ficheiro');\r\n      setInputBarcode('');\r\n    }\r\n  }\r\n\r\n  function handleConfirm() {\r\n    if (inputBarcode.length === 8) {\r\n      handleBarcodeInput(inputBarcode);\r\n    }\r\n  }\r\n\r\n  return (\r\n    \r\n    <div className=\"barcode-container\">\r\n    <p>Introduza o seu Código de Barras</p>\r\n{}\r\n<p>Total de Códigos de Barras registados: <strong>{barcodeCount}</strong></p>\r\n\r\n    <input \r\n      className=\"barcode-input\" type=\"number\" placeholder=\"Código de Barras\" \r\n      onChange={(e) => setInputBarcode(e.target.value)} \r\n      value={inputBarcode}\r\n    />\r\n    <button className=\"confirm-button\" onClick={handleConfirm}>Confirmar</button>\r\n  </div>\r\n  \r\n  );\r\n}\r\n\r\nexport default Barcode;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}