{"ast":null,"code":"var _s = $RefreshSig$();\nfunction Barcode() {\n  _s();\n  const [excelData, setExcelData] = useState(null);\n  const [viewSelected, setViewSelected] = useState('logo');\n  return function handleBarcodeInput(barcode) {\n    if (excelData !== null) {\n      let userData = excelData[barcode];\n      if (userData !== undefined && userData !== null) {\n        let doubleVerify = legicDB.filter(data => data[2] === barcode);\n        if (doubleVerify.length > 0) {\n          alert('Este utilizador já foi registado');\n          setInputBarcode('');\n        } else {\n          const legicDBCopy = [...legicDB];\n          legicDBCopy.push(userData);\n          setLegicDB(legicDBCopy);\n          setRegisteredLegicData(true);\n          localStorage.setItem('gactiveLegicReadData', JSON.stringify(legicDBCopy));\n          let getJsonArray = localStorage.getItem('gactiveImportedData');\n          let jsonConvert = JSON.parse(getJsonArray);\n          let formatJson = jsonConvert.reduce((acc, current) => {\n            return {\n              ...acc,\n              ...{\n                [current[2]]: current\n              }\n            };\n          }, {});\n          let getUserToStatus = formatJson[barcode];\n          delete jsonConvert[barcode];\n          getUserToStatus.push('check_circle');\n          const legicStatus = [...jsonConvert];\n          localStorage.setItem('gactiveImportedData', JSON.stringify(legicStatus));\n          checkDb();\n          setInputBarcode('');\n        }\n      } else {\n        alert('Este código de barras não existe');\n        setInputBarcode('');\n      }\n    } else {\n      alert('Importe um ficheiro');\n      setInputBarcode('');\n    }\n  };\n}\n_s(Barcode, \"ysUnVtSbY9kOTLeZdMUJiKTPDnE=\");\n_c = Barcode;\nexport default Barcode;\nvar _c;\n$RefreshReg$(_c, \"Barcode\");","map":{"version":3,"names":["Barcode","_s","excelData","setExcelData","useState","viewSelected","setViewSelected","handleBarcodeInput","barcode","userData","undefined","doubleVerify","legicDB","filter","data","length","alert","setInputBarcode","legicDBCopy","push","setLegicDB","setRegisteredLegicData","localStorage","setItem","JSON","stringify","getJsonArray","getItem","jsonConvert","parse","formatJson","reduce","acc","current","getUserToStatus","legicStatus","checkDb","_c","$RefreshReg$"],"sources":["C:/Users/DuaTo/Downloads/Geberactiv-main/Geberactiv-main/src/components/barcode/index.js"],"sourcesContent":["\r\nfunction Barcode(){\r\n    const [excelData, setExcelData] = useState(null);\r\n     const [viewSelected, setViewSelected] = useState('logo');\r\n    return(\r\n function handleBarcodeInput(barcode) {\r\n    if (excelData !== null) {\r\n      let userData = excelData[barcode];\r\n\r\n      if (userData !== undefined && userData !== null) {\r\n        let doubleVerify = legicDB.filter(data => data[2] === barcode);\r\n        if (doubleVerify.length > 0) {\r\n          alert('Este utilizador já foi registado');\r\n          setInputBarcode('');\r\n        } else {\r\n          const legicDBCopy = [...legicDB];\r\n          legicDBCopy.push(userData);\r\n          setLegicDB(legicDBCopy);\r\n          setRegisteredLegicData(true);\r\n          localStorage.setItem('gactiveLegicReadData', JSON.stringify(legicDBCopy));\r\n          let getJsonArray = localStorage.getItem('gactiveImportedData');\r\n          let jsonConvert = JSON.parse(getJsonArray);\r\n          let formatJson = jsonConvert.reduce((acc, current) => {\r\n            return { ...acc, ...{ [current[2]]: current } };\r\n          }, {});\r\n          let getUserToStatus = formatJson[barcode];\r\n          delete jsonConvert[barcode];\r\n          getUserToStatus.push('check_circle');\r\n          const legicStatus = [...jsonConvert];\r\n          localStorage.setItem('gactiveImportedData', JSON.stringify(legicStatus));\r\n          checkDb();\r\n          setInputBarcode('');\r\n        }\r\n      } else {\r\n        alert('Este código de barras não existe');\r\n        setInputBarcode('');\r\n      }\r\n    } else {\r\n      alert('Importe um ficheiro');\r\n      setInputBarcode('');\r\n    }\r\n  }\r\n)\r\n}\r\nexport default Barcode;\r\n"],"mappings":";AACA,SAASA,OAAOA,CAAA,EAAE;EAAAC,EAAA;EACd,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;EAC/C,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGF,QAAQ,CAAC,MAAM,CAAC;EACzD,OACH,SAASG,kBAAkBA,CAACC,OAAO,EAAE;IAClC,IAAIN,SAAS,KAAK,IAAI,EAAE;MACtB,IAAIO,QAAQ,GAAGP,SAAS,CAACM,OAAO,CAAC;MAEjC,IAAIC,QAAQ,KAAKC,SAAS,IAAID,QAAQ,KAAK,IAAI,EAAE;QAC/C,IAAIE,YAAY,GAAGC,OAAO,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAKN,OAAO,CAAC;QAC9D,IAAIG,YAAY,CAACI,MAAM,GAAG,CAAC,EAAE;UAC3BC,KAAK,CAAC,kCAAkC,CAAC;UACzCC,eAAe,CAAC,EAAE,CAAC;QACrB,CAAC,MAAM;UACL,MAAMC,WAAW,GAAG,CAAC,GAAGN,OAAO,CAAC;UAChCM,WAAW,CAACC,IAAI,CAACV,QAAQ,CAAC;UAC1BW,UAAU,CAACF,WAAW,CAAC;UACvBG,sBAAsB,CAAC,IAAI,CAAC;UAC5BC,YAAY,CAACC,OAAO,CAAC,sBAAsB,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW,CAAC,CAAC;UACzE,IAAIQ,YAAY,GAAGJ,YAAY,CAACK,OAAO,CAAC,qBAAqB,CAAC;UAC9D,IAAIC,WAAW,GAAGJ,IAAI,CAACK,KAAK,CAACH,YAAY,CAAC;UAC1C,IAAII,UAAU,GAAGF,WAAW,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAK;YACpD,OAAO;cAAE,GAAGD,GAAG;cAAE,GAAG;gBAAE,CAACC,OAAO,CAAC,CAAC,CAAC,GAAGA;cAAQ;YAAE,CAAC;UACjD,CAAC,EAAE,CAAC,CAAC,CAAC;UACN,IAAIC,eAAe,GAAGJ,UAAU,CAACtB,OAAO,CAAC;UACzC,OAAOoB,WAAW,CAACpB,OAAO,CAAC;UAC3B0B,eAAe,CAACf,IAAI,CAAC,cAAc,CAAC;UACpC,MAAMgB,WAAW,GAAG,CAAC,GAAGP,WAAW,CAAC;UACpCN,YAAY,CAACC,OAAO,CAAC,qBAAqB,EAAEC,IAAI,CAACC,SAAS,CAACU,WAAW,CAAC,CAAC;UACxEC,OAAO,CAAC,CAAC;UACTnB,eAAe,CAAC,EAAE,CAAC;QACrB;MACF,CAAC,MAAM;QACLD,KAAK,CAAC,kCAAkC,CAAC;QACzCC,eAAe,CAAC,EAAE,CAAC;MACrB;IACF,CAAC,MAAM;MACLD,KAAK,CAAC,qBAAqB,CAAC;MAC5BC,eAAe,CAAC,EAAE,CAAC;IACrB;EACF,CAAC;AAEH;AAAChB,EAAA,CA1CQD,OAAO;AAAAqC,EAAA,GAAPrC,OAAO;AA2ChB,eAAeA,OAAO;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}