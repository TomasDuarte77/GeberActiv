{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DuaTo\\\\Downloads\\\\Geberactiv-main1\\\\src\\\\components\\\\barcode\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport '../barcode/index.css';\nimport Notification from '../notification/index.js'; // Importa o componente de notificações\nimport { Logo } from '../logo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Barcode({\n  excelData,\n  legicDB,\n  setLegicDB\n}) {\n  _s();\n  const [inputBarcode, setInputBarcode] = useState('');\n  const [registeredLegicData, setRegisteredLegicData] = useState(true);\n  const [exportButtonDisplay, setExportButtonDisplay] = useState(false);\n  const [notification, setNotification] = useState({\n    message: '',\n    type: '',\n    show: false\n  });\n  const [barcodeCount, setBarcodeCount] = useState(() => {\n    return parseInt(localStorage.getItem('barcodeCount')) || 0;\n  });\n  function showNotification(message, type = 'success') {\n    setNotification({\n      message,\n      type,\n      show: true\n    });\n\n    // Garante que a notificação fecha após um tempo\n    setTimeout(() => {\n      setNotification(prev => ({\n        ...prev,\n        show: false\n      }));\n    }, 3000);\n  }\n  function checkDb() {\n    let getLocalStorage = localStorage.getItem('gactiveLegicReadData');\n    if (getLocalStorage) {\n      setExportButtonDisplay(true);\n    }\n  }\n  function handleBarcodeInput(barcode) {\n    if (!excelData) {\n      showNotification('Importe um ficheiro primeiro!', 'error');\n      setInputBarcode('');\n      return;\n    }\n    let userData = excelData[barcode];\n    if (!userData) {\n      showNotification(className = 'erronotification', 'Este código de barras não existe!', 'error');\n      setInputBarcode('');\n      return;\n    }\n    let doubleVerify = legicDB.some(data => String(data[2]) === String(barcode));\n    if (doubleVerify) {\n      showNotification('Este código de barras já foi registado!', 'warning');\n      setInputBarcode('');\n      return;\n    }\n\n    // Adicionar o novo código\n    const legicDBCopy = [...legicDB, userData];\n    setLegicDB(legicDBCopy);\n    localStorage.setItem('gactiveLegicReadData', JSON.stringify(legicDBCopy));\n    let newBarcodeCount = barcodeCount + 1;\n    setBarcodeCount(newBarcodeCount);\n    localStorage.setItem('barcodeCount', newBarcodeCount);\n    showNotification('Código de barras registado com sucesso!', 'success');\n    setInputBarcode('');\n  }\n  function handleConfirm() {\n    if (inputBarcode.length === 8) {\n      handleBarcodeInput(inputBarcode);\n    } else {\n      showNotification('O código de barras deve ter 8 dígitos!', 'warning');\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [notification.show && /*#__PURE__*/_jsxDEV(Notification, {\n      type: notification.type,\n      message: notification.message,\n      onClose: () => setNotification({\n        message: '',\n        type: '',\n        show: false\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"barcount\",\n      children: [\"Total de C\\xF3digos de Barras registados: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: barcodeCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 70\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"barcode-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Introduza o seu C\\xF3digo de Barras\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"barcode-input\",\n        type: \"number\",\n        placeholder: \"C\\xF3digo de Barras\",\n        onChange: e => setInputBarcode(e.target.value),\n        value: inputBarcode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"confirm-button\",\n        onClick: handleConfirm,\n        children: \"Confirmar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(Barcode, \"6OeYyxYo1RwXoHBD/TazAiQJa+A=\");\n_c = Barcode;\nexport default Barcode;\nvar _c;\n$RefreshReg$(_c, \"Barcode\");","map":{"version":3,"names":["useState","Notification","Logo","jsxDEV","_jsxDEV","Barcode","excelData","legicDB","setLegicDB","_s","inputBarcode","setInputBarcode","registeredLegicData","setRegisteredLegicData","exportButtonDisplay","setExportButtonDisplay","notification","setNotification","message","type","show","barcodeCount","setBarcodeCount","parseInt","localStorage","getItem","showNotification","setTimeout","prev","checkDb","getLocalStorage","handleBarcodeInput","barcode","userData","className","doubleVerify","some","data","String","legicDBCopy","setItem","JSON","stringify","newBarcodeCount","handleConfirm","length","children","onClose","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","e","target","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/DuaTo/Downloads/Geberactiv-main1/src/components/barcode/index.js"],"sourcesContent":["import { useState } from 'react';\r\nimport '../barcode/index.css';\r\nimport Notification from '../notification/index.js' // Importa o componente de notificações\r\nimport { Logo } from '../logo';\r\n\r\nfunction Barcode({ excelData, legicDB, setLegicDB }) {\r\n  const [inputBarcode, setInputBarcode] = useState('');\r\n  const [registeredLegicData, setRegisteredLegicData] = useState(true);\r\n  const [exportButtonDisplay, setExportButtonDisplay] = useState(false);\r\n  const [notification, setNotification] = useState({ message: '', type: '', show: false });\r\n  const [barcodeCount, setBarcodeCount] = useState(() => {\r\n    return parseInt(localStorage.getItem('barcodeCount')) || 0;\r\n  });\r\n\r\n  function showNotification(message, type = 'success') {\r\n    setNotification({ message, type, show: true });\r\n  \r\n    // Garante que a notificação fecha após um tempo\r\n    setTimeout(() => {\r\n      setNotification(prev => ({ ...prev, show: false }));\r\n    }, 3000);\r\n  }\r\n\r\n  function checkDb() {\r\n    let getLocalStorage = localStorage.getItem('gactiveLegicReadData');\r\n    if (getLocalStorage) {\r\n      setExportButtonDisplay(true);\r\n    }\r\n  }\r\n\r\n  function handleBarcodeInput(barcode) {\r\n    if (!excelData) {\r\n      showNotification('Importe um ficheiro primeiro!', 'error');\r\n      setInputBarcode('');\r\n      return;\r\n    }\r\n\r\n    let userData = excelData[barcode];\r\n    if (!userData) {\r\n      showNotification(className='erronotification','Este código de barras não existe!', 'error');\r\n      setInputBarcode('');\r\n      return;\r\n    }\r\n\r\n    let doubleVerify = legicDB.some(data => String(data[2]) === String(barcode));\r\n    if (doubleVerify) {\r\n      showNotification('Este código de barras já foi registado!', 'warning');\r\n      setInputBarcode('');\r\n      return;\r\n    }\r\n\r\n    // Adicionar o novo código\r\n    const legicDBCopy = [...legicDB, userData];\r\n    setLegicDB(legicDBCopy);\r\n    localStorage.setItem('gactiveLegicReadData', JSON.stringify(legicDBCopy));\r\n\r\n    let newBarcodeCount = barcodeCount + 1;\r\n    setBarcodeCount(newBarcodeCount);\r\n    localStorage.setItem('barcodeCount', newBarcodeCount);\r\n\r\n    showNotification('Código de barras registado com sucesso!', 'success');\r\n    setInputBarcode('');\r\n  }\r\n\r\n  function handleConfirm() {\r\n    if (inputBarcode.length === 8) {\r\n      handleBarcodeInput(inputBarcode);\r\n    } else {\r\n      showNotification('O código de barras deve ter 8 dígitos!', 'warning');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {notification.show && (\r\n        <Notification\r\n          type={notification.type}\r\n          message={notification.message}\r\n          onClose={() => setNotification({ message: '', type: '', show: false })}\r\n        />\r\n      )}\r\n\r\n      <p className=\"barcount\">Total de Códigos de Barras registados: <strong>{barcodeCount}</strong></p>\r\n      \r\n      <div className=\"barcode-container\">\r\n        <p>Introduza o seu Código de Barras</p>\r\n        <input \r\n          className=\"barcode-input\" \r\n          type=\"number\" \r\n          placeholder=\"Código de Barras\" \r\n          onChange={(e) => setInputBarcode(e.target.value)} \r\n          value={inputBarcode}\r\n        />\r\n        <button className=\"confirm-button\" onClick={handleConfirm}>Confirmar</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Barcode;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}