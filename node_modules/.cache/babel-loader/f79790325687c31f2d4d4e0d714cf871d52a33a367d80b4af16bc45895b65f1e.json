{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DuaTo\\\\Downloads\\\\Geberactiv-main1\\\\src\\\\components\\\\barcode\\\\index.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport '../barcode/index.css';\nimport { Logo } from '../logo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Barcode({\n  excelData,\n  legicDB,\n  setLegicDB,\n  showMessage\n}) {\n  _s();\n  const [inputBarcode, setInputBarcode] = useState('');\n  const [registeredLegicData, setRegisteredLegicData] = useState(true);\n  const [exportButtonDisplay, setExportButtonDisplay] = useState(false);\n  const [notification, setNotification] = useState({\n    message: '',\n    type: '',\n    show: false\n  });\n  const [barcodeCount, setBarcodeCount] = useState(() => {\n    return parseInt(localStorage.getItem('barcodeCount')) || 0;\n  });\n  function showNotification(message, type = 'success') {\n    setNotification({\n      message,\n      type,\n      show: true\n    });\n    setTimeout(() => {\n      setNotification({\n        message: '',\n        type: '',\n        show: false\n      });\n    }, 3000); // Notificação desaparece após 3 segundos\n  }\n  function checkDb() {\n    let getLocalStorage = localStorage.getItem('gactiveLegicReadData');\n    if (getLocalStorage) {\n      setExportButtonDisplay(true);\n    }\n  }\n  function handleBarcodeInput(barcode) {\n    if (excelData !== null) {\n      let userData = excelData[barcode];\n      if (userData !== undefined && userData !== null) {\n        let doubleVerify = legicDB.some(data => String(data[2]) === String(barcode));\n        if (doubleVerify) {\n          alert('Este código de barras já foi registado');\n          setInputBarcode('');\n          return;\n        }\n        const legicDBCopy = [...legicDB];\n        legicDBCopy.push(userData);\n        setLegicDB(legicDBCopy);\n        setRegisteredLegicData(true);\n        localStorage.setItem('gactiveLegicReadData', JSON.stringify(legicDBCopy));\n        let newBarcodeCount = barcodeCount + 1;\n        setBarcodeCount(newBarcodeCount);\n        localStorage.setItem('barcodeCount', newBarcodeCount);\n        let getJsonArray = localStorage.getItem('gactiveImportedData');\n        let jsonConvert = JSON.parse(getJsonArray);\n        let formatJson = jsonConvert.reduce((acc, current) => {\n          return {\n            ...acc,\n            ...{\n              [current[2]]: current\n            }\n          };\n        }, {});\n        let getUserToStatus = formatJson[barcode];\n        delete jsonConvert[barcode];\n        getUserToStatus.push('check_circle');\n        const legicStatus = [...jsonConvert];\n        localStorage.setItem('gactiveImportedData', JSON.stringify(legicStatus));\n        checkDb();\n        setInputBarcode('');\n      } else {\n        alert('Este código de barras não existe');\n        setInputBarcode('');\n      }\n    } else {\n      alert('Importe um ficheiro');\n      setInputBarcode('');\n    }\n  }\n  function handleConfirm() {\n    if (inputBarcode.length === 8) {\n      handleBarcodeInput(inputBarcode);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"barcount\",\n      children: [\"Total de C\\xF3digos de Barras registados: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: barcodeCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 70\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"barcode-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Introduza o seu C\\xF3digo de Barras\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"barcode-input\",\n        type: \"number\",\n        placeholder: \"C\\xF3digo de Barras\",\n        onChange: e => setInputBarcode(e.target.value),\n        value: inputBarcode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"confirm-button\",\n        onClick: handleConfirm,\n        children: \"Confirmar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(Barcode, \"6OeYyxYo1RwXoHBD/TazAiQJa+A=\");\n_c = Barcode;\nexport default Barcode;\nvar _c;\n$RefreshReg$(_c, \"Barcode\");","map":{"version":3,"names":["useState","Logo","jsxDEV","_jsxDEV","Barcode","excelData","legicDB","setLegicDB","showMessage","_s","inputBarcode","setInputBarcode","registeredLegicData","setRegisteredLegicData","exportButtonDisplay","setExportButtonDisplay","notification","setNotification","message","type","show","barcodeCount","setBarcodeCount","parseInt","localStorage","getItem","showNotification","setTimeout","checkDb","getLocalStorage","handleBarcodeInput","barcode","userData","undefined","doubleVerify","some","data","String","alert","legicDBCopy","push","setItem","JSON","stringify","newBarcodeCount","getJsonArray","jsonConvert","parse","formatJson","reduce","acc","current","getUserToStatus","legicStatus","handleConfirm","length","children","className","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","e","target","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/DuaTo/Downloads/Geberactiv-main1/src/components/barcode/index.js"],"sourcesContent":["import { useState } from 'react';\r\nimport '../barcode/index.css'\r\nimport { Logo } from '../logo';\r\n\r\nfunction Barcode({ excelData, legicDB, setLegicDB, showMessage }) {\r\n  const [inputBarcode, setInputBarcode] = useState('');\r\n  const [registeredLegicData, setRegisteredLegicData] = useState(true);\r\n  const [exportButtonDisplay, setExportButtonDisplay] = useState(false);\r\n  const [notification, setNotification] = useState({ message: '', type: '', show: false });\r\n  const [barcodeCount, setBarcodeCount] = useState(() => {\r\n    return parseInt(localStorage.getItem('barcodeCount')) || 0;\r\n  });\r\n\r\n  function showNotification(message, type = 'success') {\r\n    setNotification({ message, type, show: true });\r\n    setTimeout(() => {\r\n      setNotification({ message: '', type: '', show: false });\r\n    }, 3000); // Notificação desaparece após 3 segundos\r\n  }\r\n  function checkDb() {\r\n    let getLocalStorage = localStorage.getItem('gactiveLegicReadData');\r\n    if (getLocalStorage) {\r\n      setExportButtonDisplay(true);\r\n    }\r\n  }\r\n\r\n  function handleBarcodeInput(barcode) {\r\n    if (excelData !== null) {\r\n      let userData = excelData[barcode];\r\n  \r\n      if (userData !== undefined && userData !== null) {\r\n        let doubleVerify = legicDB.some(data => String(data[2]) === String(barcode));\r\n          if (doubleVerify) {\r\n            alert('Este código de barras já foi registado');\r\n            setInputBarcode('');\r\n            return;\r\n          }\r\n  \r\n        const legicDBCopy = [...legicDB];\r\n        legicDBCopy.push(userData);\r\n        setLegicDB(legicDBCopy);\r\n        setRegisteredLegicData(true);\r\n        localStorage.setItem('gactiveLegicReadData', JSON.stringify(legicDBCopy));\r\n  \r\n        let newBarcodeCount = barcodeCount + 1;\r\n        setBarcodeCount(newBarcodeCount);\r\n        localStorage.setItem('barcodeCount', newBarcodeCount);\r\n  \r\n        let getJsonArray = localStorage.getItem('gactiveImportedData');\r\n        let jsonConvert = JSON.parse(getJsonArray);\r\n        let formatJson = jsonConvert.reduce((acc, current) => {\r\n          return { ...acc, ...{ [current[2]]: current } };\r\n        }, {}); \r\n  \r\n        let getUserToStatus = formatJson[barcode];\r\n        delete jsonConvert[barcode];\r\n        getUserToStatus.push('check_circle');\r\n  \r\n        const legicStatus = [...jsonConvert];\r\n        localStorage.setItem('gactiveImportedData', JSON.stringify(legicStatus));\r\n  \r\n        checkDb();\r\n        setInputBarcode('');\r\n      } else {\r\n        alert('Este código de barras não existe');\r\n        setInputBarcode('');\r\n      }\r\n    } else {\r\n      alert('Importe um ficheiro');\r\n      setInputBarcode('');\r\n    }\r\n  }\r\n\r\n  function handleConfirm() {\r\n    if (inputBarcode.length === 8) {\r\n      handleBarcodeInput(inputBarcode);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p className=\"barcount\">Total de Códigos de Barras registados: <strong>{barcodeCount}</strong></p>\r\n      \r\n      <div className=\"barcode-container\">\r\n        <p>Introduza o seu Código de Barras</p>\r\n  \r\n        <input \r\n          className=\"barcode-input\" \r\n          type=\"number\" \r\n          placeholder=\"Código de Barras\" \r\n          onChange={(e) => setInputBarcode(e.target.value)} \r\n          value={inputBarcode}\r\n        />\r\n        <button className=\"confirm-button\" onClick={handleConfirm}>Confirmar</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Barcode;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}